install.packages("reticulate")
install.packages("reticulate")
from Bio.Seq import Seq
install.packages("reticulate")
from Bio.Blast import NCBIWWW
from Bio.Blast
cd
Entrez.email = 'arditmishra@gmail.com'  # Put your email address here
reticulate::repl_python()
n
# Running Sleuth R script
# Load the sleuth package
library(sleuth)
R.script Project_6S.R
Rscript Project_6S.R
# Read in the table describing samples and kallisto output paths
stab <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
getwd()
setwd("/home/amishra1/Project_6")
# Running Sleuth R script
# Load the sleuth package and dplyr library
library(sleuth)
knitr::opts_chunk$set(echo = TRUE)
sample_id <- dir(file.path("~/Project_6/"))
sample_id <- dir(file.path("~/Project_6/"))
sample_id
sample_id <- dir(file.path("~/Project_6/CFA_group", "~/Project_6/EAE_Sephin1_group", "~/Project_6/EAE_Vehicle_group"))
sample_id
sample_id <- dir(file.path(["~/Project_6/CFA_group", "~/Project_6/EAE_Sephin1_group", "~/Project_6/EAE_Vehicle_group"]))
sample_id_CFA <- dir(file.path("~/Project_6/CFA_group")
sample_id_EAE_S <- dir(file.path("~/Project_6/EAE_Sephin1_group")
sample_id_CFA <- dir(file.path("~/Project_6/CFA_group")
sample_id_EAE_S <- dir(file.path("~/Project_6/EAE_Sephin1_group")
sample_id_CFA <- dir(file.path("~/Project_6/CFA_group/")
sample_id_EAE_S <- dir(file.path("~/Project_6/EAE_Sephin1_group/")
sample_id_CFA <- dir(file.path("~/Project_6/CFA_group/"))
sample_id_EAE_S <- dir(file.path("~/Project_6/EAE_Sephin1_group/"))
sample_id_EAE_V <- dir(file.path("~/Project_6/EAE_Vehicle_group/"))
sample_id_CFA
sample_id_EAE_S
sample_id_EAE_V
# Get list of sample IDs for CFA group
sample_id_CFA <- dir(here::here("CFA_group"))
sample_id_CFA
# Get list of sample IDs for EAE with Sephin1 group
sample_id_EAE_S <- dir(here::here("EAE_Sephin1_group"))
sample_id_EAE_S
# Get list of sample IDs for EAE with vehicle group
sample_id_EAE_V <- dir(here::here("EAE_Vehicle_group"))
sample_id_EAE_V
# Get list of sample IDs for CFA group
sample_id_CFA <- dir(here::here("CFA_group"))
sample_id_CFA
# Get list of sample IDs for EAE with Sephin1 group
sample_id_EAE_S <- dir(here::here("EAE_Sephin1_group"))
sample_id_EAE_S
# Get list of sample IDs for EAE with vehicle group
sample_id_EAE_V <- dir(here::here("EAE_Vehicle_group"))
sample_id_EAE_V
#table columns: sample ids, condition, path
s2c <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(s2c)
# Get list of sample IDs for CFA group
sample_id_CFA <- dir(here::here("CFA_group"))
sample_id_CFA
# Get list of sample IDs for EAE with Sephin1 group
sample_id_EAE_S <- dir(here::here("EAE_Sephin1_group"))
sample_id_EAE_S
# Get list of sample IDs for EAE with vehicle group
sample_id_EAE_V <- dir(here::here("EAE_Vehicle_group"))
sample_id_EAE_V
#table columns: sample ids, condition, path
s2c <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
#table columns: sample ids, condition, path
s2c <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
#table columns: sample ids, condition, path
s2c <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
s2c <- dplyr::select(s2c, sample = ID, condition, path)
#table columns: sample ids, condition, path
s2c <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
s2c <- dplyr::select(s2c, sample, condition, path)
s2c
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(s2c)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(s2c, ~condition)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(s2c, ~condition)
#table columns: sample ids, condition, path
s2c <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
s2c <- dplyr::select(s2c, c('sample', 'condition', 'path'))
s2c
knitr::opts_chunk$set(echo = TRUE)
#table columns: sample ids, condition, path
s2c <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
s2c <- dplyr::select(s2c, c('sample', 'condition', 'path'))
s2c
#table columns: sample ids, condition, path
s2c <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
s2c <- dplyr::select(s2c, c('sample', 'condition', 'path'))
s2c
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(s2c, ~path)
stab
#table columns: sample ids, condition, path
s2c <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
s2c <- dplyr::select(s2c, c('sample', 'condition', 'path'))
s2c
reticulate::repl_python()
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(s2c, ~path)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(s2c, ~condition)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(s2c, ~condition)
setwd("~/Project_6/kallisto_results")
# Perform differential expression analysis comparing the two conditions
so <- sleuth_fit(so, ~condition, 'full')
# Load the required libraries
library("sleuth")
# Load the required libraries
library(sleuth)
library(sleuth)
sleuth
library(sleuth)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
stab <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab, ~condition)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
stab <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab, ~condition)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
stab <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab, ~condition)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
stab <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
stab <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
stab <- read.table("sleuth_table.txt", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Read in the table describing samples and Kallisto output paths
stab <- read.table("sleuth_table.csv", header = TRUE, stringsAsFactors = FALSE)
# Read in the table describing samples and Kallisto output paths
stab <- read.table("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
stab <- read.table("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
table -> read.csv('table.csv')
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
table -> read.csv('table.csv')
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
table = read.csv('table.csv')
stab <- read.table("table", header = TRUE, stringsAsFactors = FALSE, sep = ",")
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
table = read.csv('table.csv')
stab <- read.table("table", header = TRUE, stringsAsFactors = FALSE, sep = ",")
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
table = read.csv('table.csv')
stab <- read.table("table.csv", header = TRUE, stringsAsFactors = FALSE, sep = ",")
table = read.csv('table.csv')
table
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
table = read.csv('table.csv')
stab <- read.table("table", header = TRUE, stringsAsFactors = FALSE)
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
setwd("~/Project_6/kallisto_results")
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
# Load the required libraries
library(sleuth)
library(dplyr)
# Read in the table describing samples and Kallisto output paths
#table = read.csv('table.csv')
stab <- read.csv("table.csv", header = TRUE, stringsAsFactors = FALSE)
# Initialize the sleuth object using the sleuth_prep function
so <- sleuth_prep(stab)
reticulate::repl_python()
